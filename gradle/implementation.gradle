// Shared Gradle configuration for the Sponge implementation projects

ext.common = project(':SpongeCommon')

// Apply shared ForgeGradle configuration
apply from: common.file('gradle/minecraft.gradle')

ext.apiVersion = (api.version - '-SNAPSHOT') + '-DEV'

dependencies {
    compile common
}

// Eclipse is too stupid to order the classpath correctly unfortunately...
// Put Common last
eclipse {
    classpath {
        file {
            whenMerged { classpath ->
                def lib = classpath.entries.find { it.path == '/SpongeCommon' }
                def others = classpath.entries.findAll { it != lib }
                classpath.entries = others + lib
            }
        }
    }
}

jar {
    classifier = 'deobf'
}

// The version can change until we're done configuring the project, so delay setting the manifest entries until that is final
afterEvaluate {
    manifest {
        attributes(
                'Implementation-Version': "$version+$ciSystem-b${buildNumber}.git-$commit"
        )
    }
}

// Finish configuring SpongeCommon first
evaluationDependsOn common.path

// Apply shadow plugin to include the dependencies in the JAR
apply plugin: 'com.github.johnrengelman.shadow'

shadowJar {
    // Make sure SpongeCommon was actually reobfuscated before shading it
    dependsOn common.tasks.reobfJar

    classifier = ''

    // Exclude ForgeGradle classes from shaded JAR
    exclude 'GradleStart**'
    exclude 'net/minecraftforge/**'

    from sourceSets.java6.output

    dependencies {
        // SpongeCommon and Mixin
        include project(common.path)
        include dependency('org.spongepowered:mixin')

        // SpongeAPI and event generation
        include project(api.path)
        include dependency('org.spongepowered:event-gen-core')

        // Include all other dependencies
        include dependency('org.slf4j:slf4j-api')
        include dependency('org.apache.logging.log4j:log4j-slf4j-impl')

        include dependency('com.google.inject:guice')
        include dependency('javax.inject:javax.inject')
        include dependency('aopalliance:aopalliance')

        include dependency('com.flowpowered:flow-math')
        include dependency('com.flowpowered:flow-noise')

        include dependency('ninja.leaping.configurate:configurate-core')
        include dependency('ninja.leaping.configurate:configurate-hocon')
        include dependency('ninja.leaping.configurate:configurate-gson')
        include dependency('ninja.leaping.configurate:configurate-yaml')

        include dependency('org.yaml:snakeyaml')

        include dependency('com.zaxxer:HikariCP')
        include dependency('org.javassist:javassist')

        include dependency('org.mariadb.jdbc:mariadb-java-client')
        include dependency('com.h2database:h2')
        include dependency('org.xerial:sqlite-jdbc')
    }

    // We include multiple JDBC drivers, so we need to merge the service file to enable them all
    mergeServiceFiles()

    // Prevent other dependencies replacing our license file
    exclude 'LICENSE', 'NOTICE'
}

afterEvaluate {
    // Reobfuscate the shaded JAR directly
    reobfJar {
        dependsOn shadowJar
        jar = shadowJar.archivePath
    }
}

// Add Common access transformers
minecraft {
    atSource common.sourceSets.main
}

// Deployment stuff
task deobfJar(type: Jar, dependsOn: [classes, api.tasks.classes, common.tasks.classes]) {
    from api.sourceSets.main.output
    from common.sourceSets.main.output
    from sourceSets.main.output
}

sourceJar {
    from api.sourceSets.main.allSource
    from common.sourceSets.main.allSource
}

javadocJar {
    dependsOn api.tasks.javadoc
    dependsOn common.tasks.javadoc
    from api.tasks.javadoc.destinationDir
    from common.tasks.javadoc.destinationDir
}

task sdkZip(type: Zip) {
    enabled = false // project.file("sdk").exists()
    classifier = 'sdk'

    from fileTree("sdk");
    rename ".*\\.gitignore", ".gitignore"
    def apiVersion = "";
    if (project.ext.has('forgeVersion'))
        apiVersion = project.minecraft.version + "-" + project.ext.forgeVersion
    eachFile { file ->
        if (file.getName() == "build.gradle")
        {
           file.expand([
                "mcVersion": project.minecraft.version,
                "apiVersion": apiVersion,
                "mappings": project.minecraft.mappings,
                "version": project.version
           ])
        }
    }
}

artifacts {
    archives deobfJar
    // Include sdk ZIP only if it's actually supported for the implementation
    if (sdkZip.enabled) {
        archives sdkZip
    }
}
